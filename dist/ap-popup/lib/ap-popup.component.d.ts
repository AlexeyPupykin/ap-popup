import { ElementRef, EventEmitter, TemplateRef } from '@angular/core';
import { PopupAnimationType, PopupThemeType } from './utils/types';
import * as i0 from "@angular/core";
export declare class ApPopupComponent {
    readonly elementRef: ElementRef;
    text?: string;
    svgIcon?: string;
    template?: TemplateRef<any>;
    templateContext: object;
    theme: PopupThemeType;
    animation: PopupAnimationType;
    animationDuration: number;
    animationHideDuration: number;
    timeout: number | null;
    parentSelector: string | null;
    closeByMouseUp: boolean;
    customClass?: string;
    customWrapperClass?: string;
    zIndex?: number;
    remove: EventEmitter<void>;
    hideAnimation?: string;
    distanceToPageTop: number;
    id?: number;
    protected readonly cubicBezierFunctionIn = "cubic-bezier(0, 1.82, 0.46, 0.84)";
    protected readonly cubicBezierFunctionOut = "cubic-bezier(0.42, -0.65, 0.27, 0.93)";
    private readonly _close$;
    get getHostTransition(): string;
    get getZIndex(): string;
    get getCursor(): string;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onMouseUp(): void;
    close(): void;
    updateDistanceTop(): void;
    private _startHideAnimation;
    private _getDistanceFromBottomToPageTop;
    static ɵfac: i0.ɵɵFactoryDeclaration<ApPopupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ApPopupComponent, "lib-ap-popup", never, { "text": { "alias": "text"; "required": false; }; "svgIcon": { "alias": "svgIcon"; "required": false; }; "template": { "alias": "template"; "required": false; }; "templateContext": { "alias": "templateContext"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; "animation": { "alias": "animation"; "required": false; }; "animationDuration": { "alias": "animationDuration"; "required": false; }; "animationHideDuration": { "alias": "animationHideDuration"; "required": false; }; "timeout": { "alias": "timeout"; "required": false; }; "parentSelector": { "alias": "parentSelector"; "required": false; }; "closeByMouseUp": { "alias": "closeByMouseUp"; "required": false; }; "customClass": { "alias": "customClass"; "required": false; }; "customWrapperClass": { "alias": "customWrapperClass"; "required": false; }; "zIndex": { "alias": "zIndex"; "required": false; }; }, { "remove": "remove"; }, never, never, true, never>;
}
